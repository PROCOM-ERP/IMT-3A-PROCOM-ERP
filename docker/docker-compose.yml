version: "3.8"

# +-----------------------------------------------------------------------------+
# | Services section                                                            |
# +-----------------------------------------------------------------------------+

services:
  # +---------------------------------------------------------------------------+
  # | Database section                                                          |
  # +---------------------------------------------------------------------------+

  postgres-procom-erp-authentication-service:
    container_name: ${DB_AUTHENTICATION_SERVICE_HOSTNAME}
    image: ${DB_AUTHENTICATION_SERVICE_HOSTNAME}:${DB_AUTHENTICATION_SERVICE_IMAGE_VERSION}
    build:
      context: ${DB_AUTHENTICATION_SERVICE_PATH}
      dockerfile: Dockerfile
      args:
        DB_IMAGE: ${DB_IMAGE}
    hostname: ${DB_AUTHENTICATION_SERVICE_HOSTNAME}
    environment:
      POSTGRES_DB: ${DB_AUTHENTICATION_SERVICE_DB}
    secrets:
      - DB_AUTHENTICATION_SERVICE_USER
      - DB_AUTHENTICATION_SERVICE_PASSWORD
    ports:
      - "${DB_AUTHENTICATION_SERVICE_PORT_EXT}:${DB_AUTHENTICATION_SERVICE_PORT_INT}"
    volumes:
      - db-procom-erp-authentication-service-data:/var/lib/postgresql/data
    networks:
      - vnet-procom-erp
    command: -c 'port=${DB_AUTHENTICATION_SERVICE_PORT_INT}'

  # +-----------------------------------------------------------------------------+

  postgres-procom-erp-directory-service:
    container_name: ${DB_DIRECTORY_SERVICE_HOSTNAME}
    image: ${DB_DIRECTORY_SERVICE_HOSTNAME}:${DB_DIRECTORY_SERVICE_IMAGE_VERSION}
    build:
      context: ${DB_DIRECTORY_SERVICE_PATH}
      dockerfile: Dockerfile
      args:
        DB_IMAGE: ${DB_IMAGE}
    hostname: ${DB_DIRECTORY_SERVICE_HOSTNAME}
    environment:
      POSTGRES_DB: ${DB_DIRECTORY_SERVICE_DB}
    secrets:
      - DB_DIRECTORY_SERVICE_USER
      - DB_DIRECTORY_SERVICE_PASSWORD
    ports:
      - "${DB_DIRECTORY_SERVICE_PORT_EXT}:${DB_DIRECTORY_SERVICE_PORT_INT}"
    volumes:
      - db-procom-erp-directory-service-data:/var/lib/postgresql/data
    networks:
      - vnet-procom-erp
    command: -c 'port=${DB_DIRECTORY_SERVICE_PORT_INT}'

  # +-----------------------------------------------------------------------------+

  postgres-procom-erp-inventory-service:
    container_name: ${DB_INVENTORY_SERVICE_HOSTNAME}
    image: ${DB_INVENTORY_SERVICE_HOSTNAME}:${DB_INVENTORY_SERVICE_IMAGE_VERSION}
    build:
      context: ${DB_INVENTORY_SERVICE_PATH}
      dockerfile: Dockerfile
      args:
        DB_IMAGE: ${DB_IMAGE}
    hostname: ${DB_INVENTORY_SERVICE_HOSTNAME}
    environment:
      POSTGRES_DB: ${DB_INVENTORY_SERVICE_DB}
    secrets:
      - DB_INVENTORY_SERVICE_USER
      - DB_INVENTORY_SERVICE_PASSWORD
    ports:
      - "${DB_INVENTORY_SERVICE_PORT_EXT}:${DB_INVENTORY_SERVICE_PORT_INT}"
    volumes:
      - db-procom-erp-inventory-service-data:/var/lib/postgresql/data
    networks:
      - vnet-procom-erp
    command: -c 'port=${DB_INVENTORY_SERVICE_PORT_INT}'

  # +-----------------------------------------------------------------------------+

  postgres-procom-erp-order-service:
    container_name: ${DB_ORDER_SERVICE_HOSTNAME}
    image: ${DB_ORDER_SERVICE_HOSTNAME}:${DB_ORDER_SERVICE_IMAGE_VERSION}
    build:
      context: ${DB_ORDER_SERVICE_PATH}
      dockerfile: Dockerfile
      args:
        DB_IMAGE: ${DB_IMAGE}
    hostname: ${DB_ORDER_SERVICE_HOSTNAME}
    environment:
      POSTGRES_DB: ${DB_ORDER_SERVICE_DB}
    secrets:
      - DB_ORDER_SERVICE_USER
      - DB_ORDER_SERVICE_PASSWORD
    ports:
      - "${DB_ORDER_SERVICE_PORT_EXT}:${DB_ORDER_SERVICE_PORT_INT}"
    volumes:
      - db-procom-erp-order-service-data:/var/lib/postgresql/data
    networks:
      - vnet-procom-erp
    command: -c 'port=${DB_ORDER_SERVICE_PORT_INT}'

  # +---------------------------------------------------------------------------+
  # | Backend containers section                                                |
  # +---------------------------------------------------------------------------+

  springboot-procom-erp-message-broker-service:
    container_name: ${BACKEND_MESSAGE_BROKER_SERVICE_HOSTNAME}
    image: ${BACKEND_MESSAGE_BROKER_SERVICE_HOSTNAME}:${BACKEND_MESSAGE_BROKER_SERVICE_IMAGE_VERSION}
    build:
      context: ${BACKEND_MESSAGE_BROKER_SERVICE_PATH}
      dockerfile: Dockerfile
      args:
        RABBIT_MQ_IMAGE: ${RABBIT_MQ_IMAGE}
        BACKEND_MESSAGE_BROKER_SERVICE_PORT_INT: ${BACKEND_MESSAGE_BROKER_SERVICE_PORT_INT}
    hostname: ${BACKEND_MESSAGE_BROKER_SERVICE_HOSTNAME}
    env_file: ./.env
    secrets:
      - BACKEND_MESSAGE_BROKER_SERVICE_USERNAME
      - BACKEND_MESSAGE_BROKER_SERVICE_PASSWORD
      - SECURITY_JWT_SECRET_KEY
      - SECURITY_TRUST_STORE_PASSWORD
    ports:
      - "${BACKEND_MESSAGE_BROKER_SERVICE_PORT_EXT}:${BACKEND_MESSAGE_BROKER_SERVICE_PORT_INT}"
      - "${BACKEND_MESSAGE_BROKER_SERVICE_ADMIN_PORT_EXT}:${BACKEND_MESSAGE_BROKER_SERVICE_ADMIN_PORT_INT}"
    volumes:
      - procom-erp-message-broker-service-data:/var/lib/rabbitmq
    networks:
      - vnet-procom-erp

  # +-----------------------------------------------------------------------------+

  springboot-procom-erp-gateway-service:
    container_name: ${BACKEND_GATEWAY_SERVICE_HOSTNAME}
    image: ${BACKEND_GATEWAY_SERVICE_HOSTNAME}:${BACKEND_GATEWAY_SERVICE_IMAGE_VERSION}
    build:
      context: ${BACKEND_GATEWAY_SERVICE_PATH}
      dockerfile: Dockerfile
      args:
        JAVA_IMAGE: ${JAVA_IMAGE}
        JAVA_BUILD_IMAGE: ${JAVA_BUILD_IMAGE}
        MAVEN_JAVA_VERSION: ${MAVEN_JAVA_VERSION}
        BACKEND_GATEWAY_SERVICE_IMAGE_VERSION: ${BACKEND_GATEWAY_SERVICE_IMAGE_VERSION}
        MAVEN_SPRING_BOOT_VERSION: ${MAVEN_SPRING_BOOT_VERSION}
        MAVEN_SPRING_CLOUD_VERSION: ${MAVEN_SPRING_CLOUD_VERSION}
        BACKEND_GATEWAY_SERVICE_PORT_INT: ${BACKEND_GATEWAY_SERVICE_PORT_INT}
        SECURITY_TRUST_STORE_PATH: ${SECURITY_TRUST_STORE_PATH}
        ENTRYPOINT: ${ENTRYPOINT}
    hostname: ${BACKEND_GATEWAY_SERVICE_HOSTNAME}
    env_file: ./.env
    secrets:
      - BACKEND_GATEWAY_SERVICE_HTTPS_KEY_STORE_ALIAS
      - BACKEND_GATEWAY_SERVICE_HTTPS_KEY_STORE_PASSWORD
      - SECURITY_JWT_SECRET_KEY
      - SECURITY_JWT_CLAIMS_KEY_ROLES
      - SECURITY_SERVICES_SHARED_KEY
      - SECURITY_TRUST_STORE_PASSWORD
    ports:
      - "${BACKEND_GATEWAY_SERVICE_PORT_EXT}:${BACKEND_GATEWAY_SERVICE_PORT_INT}"
    networks:
      - vnet-procom-erp

  # +-----------------------------------------------------------------------------+

  springboot-procom-erp-authentication-service:
    container_name: ${BACKEND_AUTHENTICATION_SERVICE_HOSTNAME}
    image: ${BACKEND_AUTHENTICATION_SERVICE_HOSTNAME}:${BACKEND_AUTHENTICATION_SERVICE_IMAGE_VERSION}
    build:
      context: ${BACKEND_AUTHENTICATION_SERVICE_PATH}
      dockerfile: Dockerfile
      args:
        JAVA_BUILD_IMAGE: ${JAVA_BUILD_IMAGE}
        JAVA_IMAGE: ${JAVA_IMAGE}
        MAVEN_JAVA_VERSION: ${MAVEN_JAVA_VERSION}
        BACKEND_AUTHENTICATION_SERVICE_IMAGE_VERSION: ${BACKEND_AUTHENTICATION_SERVICE_IMAGE_VERSION}
        MAVEN_SPRING_BOOT_VERSION: ${MAVEN_SPRING_BOOT_VERSION}
        MAVEN_SPRINGDOC_OPENAPI_VERSION: ${MAVEN_SPRINGDOC_OPENAPI_VERSION}
        MAVEN_APACHE_HTTP_VERSION: ${MAVEN_APACHE_HTTP_VERSION}
        MAVEN_AMQP_VERSION: ${MAVEN_AMQP_VERSION}
        MAVEN_POSTGRESQL_VERSION: ${MAVEN_POSTGRESQL_VERSION}
        MAVEN_LOMBOK_VERSION: ${MAVEN_LOMBOK_VERSION}
        MAVEN_SPRING_SECURITY_TEST_VERSION: ${MAVEN_SPRING_SECURITY_TEST_VERSION}
        BACKEND_AUTHENTICATION_SERVICE_PORT_INT: ${BACKEND_AUTHENTICATION_SERVICE_PORT_INT}
        BACKEND_MESSAGE_BROKER_SERVICE_PORT_INT: ${BACKEND_MESSAGE_BROKER_SERVICE_PORT_INT}
        SECURITY_TRUST_STORE_PATH: ${SECURITY_TRUST_STORE_PATH}
        ENTRYPOINT: ${ENTRYPOINT}
    hostname: ${BACKEND_AUTHENTICATION_SERVICE_HOSTNAME}
    env_file: ./.env
    secrets:
      - DB_AUTHENTICATION_SERVICE_USER
      - DB_AUTHENTICATION_SERVICE_PASSWORD
      - BACKEND_MAIL_USERNAME
      - BACKEND_MAIL_PASSWORD
      - BACKEND_MESSAGE_BROKER_SERVICE_USERNAME
      - BACKEND_MESSAGE_BROKER_SERVICE_PASSWORD
      - BACKEND_AUTHENTICATION_SERVICE_HTTPS_KEY_STORE_ALIAS
      - BACKEND_AUTHENTICATION_SERVICE_HTTPS_KEY_STORE_PASSWORD
      - SECURITY_JWT_SECRET_KEY
      - SECURITY_JWT_CLAIMS_KEY_ROLES
      - SECURITY_SERVICES_SHARED_KEY
      - SECURITY_TRUST_STORE_PASSWORD
    depends_on:
      - postgres-procom-erp-authentication-service
      - springboot-procom-erp-message-broker-service
    networks:
      - vnet-procom-erp

  # +-----------------------------------------------------------------------------+

  springboot-procom-erp-directory-service:
    container_name: ${BACKEND_DIRECTORY_SERVICE_HOSTNAME}
    image: ${BACKEND_DIRECTORY_SERVICE_HOSTNAME}:${BACKEND_DIRECTORY_SERVICE_IMAGE_VERSION}
    build:
      context: ${BACKEND_DIRECTORY_SERVICE_PATH}
      dockerfile: Dockerfile
      args:
        JAVA_BUILD_IMAGE: ${JAVA_BUILD_IMAGE}
        JAVA_IMAGE: ${JAVA_IMAGE}
        MAVEN_JAVA_VERSION: ${MAVEN_JAVA_VERSION}
        BACKEND_DIRECTORY_SERVICE_IMAGE_VERSION: ${BACKEND_DIRECTORY_SERVICE_IMAGE_VERSION}
        MAVEN_SPRING_BOOT_VERSION: ${MAVEN_SPRING_BOOT_VERSION}
        MAVEN_SPRINGDOC_OPENAPI_VERSION: ${MAVEN_SPRINGDOC_OPENAPI_VERSION}
        MAVEN_APACHE_HTTP_VERSION: ${MAVEN_APACHE_HTTP_VERSION}
        MAVEN_AMQP_VERSION: ${MAVEN_AMQP_VERSION}
        MAVEN_POSTGRESQL_VERSION: ${MAVEN_POSTGRESQL_VERSION}
        MAVEN_LOMBOK_VERSION: ${MAVEN_LOMBOK_VERSION}
        MAVEN_SPRING_SECURITY_TEST_VERSION: ${MAVEN_SPRING_SECURITY_TEST_VERSION}
        BACKEND_DIRECTORY_SERVICE_PORT_INT: ${BACKEND_DIRECTORY_SERVICE_PORT_INT}
        BACKEND_MESSAGE_BROKER_SERVICE_PORT_INT: ${BACKEND_MESSAGE_BROKER_SERVICE_PORT_INT}
        SECURITY_TRUST_STORE_PATH: ${SECURITY_TRUST_STORE_PATH}
        ENTRYPOINT: ${ENTRYPOINT}
    hostname: ${BACKEND_DIRECTORY_SERVICE_HOSTNAME}
    env_file: ./.env
    secrets:
      - DB_DIRECTORY_SERVICE_USER
      - DB_DIRECTORY_SERVICE_PASSWORD
      - BACKEND_MESSAGE_BROKER_SERVICE_USERNAME
      - BACKEND_MESSAGE_BROKER_SERVICE_PASSWORD
      - BACKEND_DIRECTORY_SERVICE_HTTPS_KEY_STORE_ALIAS
      - BACKEND_DIRECTORY_SERVICE_HTTPS_KEY_STORE_PASSWORD
      - SECURITY_JWT_SECRET_KEY
      - SECURITY_JWT_CLAIMS_KEY_ROLES
      - SECURITY_SERVICES_SHARED_KEY
      - SECURITY_TRUST_STORE_PASSWORD
    depends_on:
      - postgres-procom-erp-directory-service
      - springboot-procom-erp-authentication-service
    networks:
      - vnet-procom-erp

  # +-----------------------------------------------------------------------------+

  springboot-procom-erp-inventory-service:
    container_name: ${BACKEND_INVENTORY_SERVICE_HOSTNAME}
    image: ${BACKEND_INVENTORY_SERVICE_HOSTNAME}:${BACKEND_INVENTORY_SERVICE_IMAGE_VERSION}
    build:
      context: ${BACKEND_INVENTORY_SERVICE_PATH}
      dockerfile: Dockerfile
      args:
        JAVA_BUILD_IMAGE: ${JAVA_BUILD_IMAGE}
        JAVA_IMAGE: ${JAVA_IMAGE}
        MAVEN_JAVA_VERSION: ${MAVEN_JAVA_VERSION}
        BACKEND_INVENTORY_SERVICE_IMAGE_VERSION: ${BACKEND_INVENTORY_SERVICE_IMAGE_VERSION}
        MAVEN_SPRING_BOOT_VERSION: ${MAVEN_SPRING_BOOT_VERSION}
        MAVEN_SPRINGDOC_OPENAPI_VERSION: ${MAVEN_SPRINGDOC_OPENAPI_VERSION}
        MAVEN_POSTGRESQL_VERSION: ${MAVEN_POSTGRESQL_VERSION}
        MAVEN_LOMBOK_VERSION: ${MAVEN_LOMBOK_VERSION}
        BACKEND_INVENTORY_SERVICE_PORT_INT: ${BACKEND_INVENTORY_SERVICE_PORT_INT}
        BACKEND_MESSAGE_BROKER_SERVICE_PORT_INT: ${BACKEND_MESSAGE_BROKER_SERVICE_PORT_INT}
        SECURITY_TRUST_STORE_PATH: ${SECURITY_TRUST_STORE_PATH}
        ENTRYPOINT: ${ENTRYPOINT}
    hostname: ${BACKEND_INVENTORY_SERVICE_HOSTNAME}
    env_file: ./.env
    secrets:
      - DB_INVENTORY_SERVICE_USER
      - DB_INVENTORY_SERVICE_PASSWORD
      - BACKEND_MESSAGE_BROKER_SERVICE_USERNAME
      - BACKEND_MESSAGE_BROKER_SERVICE_PASSWORD
      - BACKEND_INVENTORY_SERVICE_HTTPS_KEY_STORE_ALIAS
      - BACKEND_INVENTORY_SERVICE_HTTPS_KEY_STORE_PASSWORD
      - SECURITY_JWT_SECRET_KEY
      - SECURITY_JWT_CLAIMS_KEY_ROLES
      - SECURITY_SERVICES_SHARED_KEY
      - SECURITY_TRUST_STORE_PASSWORD
    depends_on:
      - "postgres-procom-erp-inventory-service"
      - "springboot-procom-erp-authentication-service"
    networks:
      - vnet-procom-erp

  # +-----------------------------------------------------------------------------+

  springboot-procom-erp-order-service:
    container_name: ${BACKEND_ORDER_SERVICE_HOSTNAME}
    image: ${BACKEND_ORDER_SERVICE_HOSTNAME}:${BACKEND_ORDER_SERVICE_IMAGE_VERSION}
    build:
      context: ${BACKEND_ORDER_SERVICE_PATH}
      dockerfile: Dockerfile
      args:
        JAVA_BUILD_IMAGE: ${JAVA_BUILD_IMAGE}
        JAVA_IMAGE: ${JAVA_IMAGE}
        MAVEN_JAVA_VERSION: ${MAVEN_JAVA_VERSION}
        BACKEND_ORDER_SERVICE_IMAGE_VERSION: ${BACKEND_ORDER_SERVICE_IMAGE_VERSION}
        MAVEN_SPRING_BOOT_VERSION: ${MAVEN_SPRING_BOOT_VERSION}
        MAVEN_SPRINGDOC_OPENAPI_VERSION: ${MAVEN_SPRINGDOC_OPENAPI_VERSION}
        MAVEN_APACHE_HTTP_VERSION: ${MAVEN_APACHE_HTTP_VERSION}
        MAVEN_AMQP_VERSION: ${MAVEN_AMQP_VERSION}
        MAVEN_POSTGRESQL_VERSION: ${MAVEN_POSTGRESQL_VERSION}
        MAVEN_LOMBOK_VERSION: ${MAVEN_LOMBOK_VERSION}
        MAVEN_SPRING_SECURITY_TEST_VERSION: ${MAVEN_SPRING_SECURITY_TEST_VERSION}
        BACKEND_ORDER_SERVICE_PORT_INT: ${BACKEND_ORDER_SERVICE_PORT_INT}
        BACKEND_MESSAGE_BROKER_SERVICE_PORT_INT: ${BACKEND_MESSAGE_BROKER_SERVICE_PORT_INT}
        SECURITY_TRUST_STORE_PATH: ${SECURITY_TRUST_STORE_PATH}
        ENTRYPOINT: ${ENTRYPOINT}
    hostname: ${BACKEND_ORDER_SERVICE_HOSTNAME}
    env_file: ./.env
    secrets:
      - DB_ORDER_SERVICE_USER
      - DB_ORDER_SERVICE_PASSWORD
      - BACKEND_MESSAGE_BROKER_SERVICE_USERNAME
      - BACKEND_MESSAGE_BROKER_SERVICE_PASSWORD
      - BACKEND_ORDER_SERVICE_HTTPS_KEY_STORE_ALIAS
      - BACKEND_ORDER_SERVICE_HTTPS_KEY_STORE_PASSWORD
      - SECURITY_JWT_SECRET_KEY
      - SECURITY_JWT_CLAIMS_KEY_ROLES
      - SECURITY_SERVICES_SHARED_KEY
      - SECURITY_TRUST_STORE_PASSWORD
    depends_on:
      - "postgres-procom-erp-order-service"
      - "springboot-procom-erp-authentication-service"
    networks:
      - vnet-procom-erp

  # +---------------------------------------------------------------------------+
  # | Frontend containers section                                               |
  # +---------------------------------------------------------------------------+

  react-procom-erp-webapp-service:
    container_name: ${FRONTEND_WEBAPP_SERVICE_HOSTNAME}
    image: ${FRONTEND_WEBAPP_SERVICE_HOSTNAME}:${FRONTEND_WEBAPP_SERVICE_IMAGE_VERSION}
    build:
      context: ${FRONTEND_WEBAPP_SERVICE_PATH}
      dockerfile: Dockerfile
      args:
        FRONT_BUILD_IMAGE: ${FRONT_BUILD_IMAGE}
        FRONT_IMAGE: ${FRONT_IMAGE}
    hostname: ${FRONTEND_WEBAPP_SERVICE_HOSTNAME}
    environment:
      FRONTEND_WEBAPP_SERVICE_PORT_INT: ${FRONTEND_WEBAPP_SERVICE_PORT_INT}
    ports:
      - ${FRONTEND_WEBAPP_SERVICE_PORT_INT}:${FRONTEND_WEBAPP_SERVICE_PORT_EXT}
    depends_on:
      - "springboot-procom-erp-gateway-service"
      - "springboot-procom-erp-authentication-service"
    networks:
      - vnet-procom-erp

# +-----------------------------------------------------------------------------+
# | Networks section                                                            |
# +-----------------------------------------------------------------------------+

networks:
  vnet-procom-erp:
    driver: bridge

# +-----------------------------------------------------------------------------+
# | Volumes  section                                                            |
# +-----------------------------------------------------------------------------+

volumes:
  db-procom-erp-authentication-service-data:
  db-procom-erp-directory-service-data:
  db-procom-erp-inventory-service-data:
  db-procom-erp-order-service-data:
  procom-erp-message-broker-service-data:

# +-----------------------------------------------------------------------------+
# | Secrets section                                                             |
# +-----------------------------------------------------------------------------+

secrets:
  DB_AUTHENTICATION_SERVICE_USER:
    file: ${DOCKER_SECRETS_PATH}/DB_AUTHENTICATION_SERVICE_USER.txt
  DB_AUTHENTICATION_SERVICE_PASSWORD:
    file: ${DOCKER_SECRETS_PATH}/DB_AUTHENTICATION_SERVICE_PASSWORD.txt
  DB_DIRECTORY_SERVICE_USER:
    file: ${DOCKER_SECRETS_PATH}/DB_DIRECTORY_SERVICE_USER.txt
  DB_DIRECTORY_SERVICE_PASSWORD:
    file: ${DOCKER_SECRETS_PATH}/DB_DIRECTORY_SERVICE_PASSWORD.txt
  DB_INVENTORY_SERVICE_USER:
    file: ${DOCKER_SECRETS_PATH}/DB_INVENTORY_SERVICE_USER.txt
  DB_INVENTORY_SERVICE_PASSWORD:
    file: ${DOCKER_SECRETS_PATH}/DB_INVENTORY_SERVICE_PASSWORD.txt
  DB_ORDER_SERVICE_USER:
    file: ${DOCKER_SECRETS_PATH}/DB_ORDER_SERVICE_USER.txt
  DB_ORDER_SERVICE_PASSWORD:
    file: ${DOCKER_SECRETS_PATH}/DB_ORDER_SERVICE_PASSWORD.txt
  BACKEND_MAIL_USERNAME:
    file: ${DOCKER_SECRETS_PATH}/BACKEND_MAIL_USERNAME.txt
  BACKEND_MAIL_PASSWORD:
    file: ${DOCKER_SECRETS_PATH}/BACKEND_MAIL_PASSWORD.txt
  BACKEND_MESSAGE_BROKER_SERVICE_USERNAME:
    file: ${DOCKER_SECRETS_PATH}/BACKEND_MESSAGE_BROKER_SERVICE_USERNAME.txt
  BACKEND_MESSAGE_BROKER_SERVICE_PASSWORD:
    file: ${DOCKER_SECRETS_PATH}/BACKEND_MESSAGE_BROKER_SERVICE_PASSWORD.txt
  BACKEND_AUTHENTICATION_SERVICE_HTTPS_KEY_STORE_ALIAS:
    file: ${DOCKER_SECRETS_PATH}/BACKEND_AUTHENTICATION_SERVICE_HTTPS_KEY_STORE_ALIAS.txt
  BACKEND_AUTHENTICATION_SERVICE_HTTPS_KEY_STORE_PASSWORD:
    file: ${DOCKER_SECRETS_PATH}/BACKEND_AUTHENTICATION_SERVICE_HTTPS_KEY_STORE_PASSWORD.txt
  BACKEND_GATEWAY_SERVICE_HTTPS_KEY_STORE_ALIAS:
    file: ${DOCKER_SECRETS_PATH}/BACKEND_GATEWAY_SERVICE_HTTPS_KEY_STORE_ALIAS.txt
  BACKEND_GATEWAY_SERVICE_HTTPS_KEY_STORE_PASSWORD:
    file: ${DOCKER_SECRETS_PATH}/BACKEND_GATEWAY_SERVICE_HTTPS_KEY_STORE_PASSWORD.txt
  BACKEND_MESSAGE_BROKER_SERVICE_HTTPS_KEY_STORE_ALIAS:
    file: ${DOCKER_SECRETS_PATH}/BACKEND_MESSAGE_BROKER_SERVICE_HTTPS_KEY_STORE_ALIAS.txt
  BACKEND_MESSAGE_BROKER_SERVICE_HTTPS_KEY_STORE_PASSWORD:
    file: ${DOCKER_SECRETS_PATH}/BACKEND_MESSAGE_BROKER_SERVICE_HTTPS_KEY_STORE_PASSWORD.txt
  BACKEND_DIRECTORY_SERVICE_HTTPS_KEY_STORE_ALIAS:
    file: ${DOCKER_SECRETS_PATH}/BACKEND_DIRECTORY_SERVICE_HTTPS_KEY_STORE_ALIAS.txt
  BACKEND_DIRECTORY_SERVICE_HTTPS_KEY_STORE_PASSWORD:
    file: ${DOCKER_SECRETS_PATH}/BACKEND_DIRECTORY_SERVICE_HTTPS_KEY_STORE_PASSWORD.txt
  BACKEND_INVENTORY_SERVICE_HTTPS_KEY_STORE_ALIAS:
    file: ${DOCKER_SECRETS_PATH}/BACKEND_INVENTORY_SERVICE_HTTPS_KEY_STORE_ALIAS.txt
  BACKEND_INVENTORY_SERVICE_HTTPS_KEY_STORE_PASSWORD:
    file: ${DOCKER_SECRETS_PATH}/BACKEND_INVENTORY_SERVICE_HTTPS_KEY_STORE_PASSWORD.txt
  BACKEND_ORDER_SERVICE_HTTPS_KEY_STORE_ALIAS:
    file: ${DOCKER_SECRETS_PATH}/BACKEND_ORDER_SERVICE_HTTPS_KEY_STORE_ALIAS.txt
  BACKEND_ORDER_SERVICE_HTTPS_KEY_STORE_PASSWORD:
    file: ${DOCKER_SECRETS_PATH}/BACKEND_ORDER_SERVICE_HTTPS_KEY_STORE_PASSWORD.txt
  SECURITY_JWT_SECRET_KEY:
    file: ${DOCKER_SECRETS_PATH}/SECURITY_JWT_SECRET_KEY.txt
  SECURITY_SERVICES_SHARED_KEY:
    file: ${DOCKER_SECRETS_PATH}/SECURITY_SERVICES_SHARED_KEY.txt
  SECURITY_JWT_CLAIMS_KEY_ROLES:
    file: ${DOCKER_SECRETS_PATH}/SECURITY_JWT_CLAIMS_KEY_ROLES.txt
  SECURITY_TRUST_STORE_PASSWORD:
    file: ${DOCKER_SECRETS_PATH}/SECURITY_TRUST_STORE_PASSWORD.txt
  SECURITY_TRUST_STORE_ALIAS:
    file: ${DOCKER_SECRETS_PATH}/SECURITY_TRUST_STORE_ALIAS.txt
